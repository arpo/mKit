# Cline Rules for mKit Project

This file documents key patterns, preferences, and project intelligence learned during development.

## Frontend Development Patterns (/client directory)

1.  **Component Structure:**
    *   Enforce the three-file structure for components/pages:
        *   `ComponentName.tsx`: React component, focused on JSX markup and rendering. Minimal logic.
        *   `Script.ts`: Contains component-specific logic, Zustand store (`create`), state interfaces, actions, and exported helper/initialization functions.
        *   `ComponentName.css`: Component-specific styles.
    *   This separation improves maintainability and isolates concerns.

2.  **Logic Separation:**
    *   Mandate moving state logic (`zustand`), actions, API call triggers, and complex computations into `Script.ts`.
    *   `.tsx` files should primarily contain JSX, import necessary state/actions via Zustand hooks/selectors, and call exported functions from `Script.ts`.

3.  **`useEffect` Prohibition (CRITICAL):**
    *   **Avoid using `useEffect`** for component initialization, data fetching triggers, or running logic on mount/update unless absolutely necessary for syncing with external, non-React systems.
    *   **PREFERRED PATTERN:** Place initialization/setup logic within functions exported from `Script.ts` (e.g., `initComponent()`). Import and call these functions *directly* at the top of the component's function body in the `.tsx` file.
    *   **Reasoning:** This keeps components cleaner, makes logic flow more predictable, avoids potential infinite loops or unnecessary re-renders associated with misused `useEffect`, and centralizes component logic in `Script.ts`.

4.  **State Management:**
    *   Use `zustand` for state management.
    *   Define stores (`create<...>`) within the relevant component/page's `Script.ts` file.
    *   Export state interfaces (e.g., `export interface MyState { ... }`) from `Script.ts`.
    *   **CRITICAL Selector Pattern:** **ALWAYS use individual selectors** for each piece of state required by a component. **DO NOT use object selectors** (e.g., `useStore(state => ({ key1: state.key1, key2: state.key2 }))`).
        *   **Reasoning:** Object selectors return a new object reference on every render, which bypasses Zustand's shallow equality check and can lead to infinite re-render loops, especially when combined with `useEffect` or other dependencies. Individual selectors ensure components only re-render when the specific state slice they depend on changes.
        *   **Example (Good):**
            ```typescript
            const isLoading = useMyStore((state) => state.isLoading);
            const items = useMyStore((state) => state.items);
            ```
        *   **Example (Bad - Avoid):**
            ```typescript
            // const { isLoading, items } = useMyStore((state) => ({ isLoading: state.isLoading, items: state.items }));
            ```

5.  **Styling (Mantine Preference):**
    *   **Prefer Mantine's styling system:** Utilize Mantine component props (e.g., `p`, `m`, `ta`), theme variables (`theme.spacing`, `theme.colors`), and style functions (`createStyles`) for styling.
    *   **Avoid inline `style` props.**
    *   Use separate `.css` files (`ComponentName.css`) only when Mantine's system is insufficient or for complex, non-Mantine-related styling.
    *   Leverage Mantine's theme (`client/src/main.tsx`) for consistent spacing, colors, and typography.

## General & Workflow

*   **Memory Bank:** Keep the `/memory-bank` directory updated, especially `activeContext.md` and `progress.md`, to ensure continuity.
*   **Communication:** Ask for clarification if requirements or patterns are unclear. Verify assumptions.

*   **Development Server (CRITICAL):** **DO NOT use 
`npm run dev` or `npm run dev:client`
The system is running already!!!!
*   **Deployment (GCP):** Prefer using Cline (Sonnet model) for initial GCP setup and deployment. Use the following prompt structure:
    ```
    Setting up this project on GCP. 

    Here's my new project:
    Project number: <your-project-number>
    Project ID: <your-project-id>

    Here's a guide you created to me on how to do it:
    DEPLOY-FROM-SCRATCH-GUIDE.md

    I want you to help me get this project up and running on GCP. Read the guide and help me through.
    ```
    For subsequent deployments, `npm run deploy` can be used.
